{
  "nodes": {
    "recommendation-service": {
      "name": "recommendation-service",
      "type": "app",
      "data": {
        "root": "apps/backend/post-mvp-services/recommendation-service",
        "targets": {
          "test": {
            "metadata": {
              "technologies": [
                "jest"
              ],
              "description": "Run Jest Tests",
              "help": {
                "command": "npx jest --help",
                "example": {
                  "options": {
                    "coverage": true
                  }
                }
              }
            },
            "cache": true,
            "inputs": [
              "default",
              "^production",
              "{workspaceRoot}/apps/jest.preset.js",
              {
                "externalDependencies": [
                  "jest"
                ]
              }
            ],
            "outputs": [
              "{workspaceRoot}/apps/coverage/apps/post-mvp-services/recommendation-service"
            ],
            "executor": "nx:run-commands",
            "options": {
              "cwd": "apps/backend/post-mvp-services/recommendation-service",
              "env": {
                "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\",\"module\":\"commonjs\",\"customConditions\":null}"
              },
              "command": "jest",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "serve": {
            "continuous": true,
            "executor": "@nx/esbuild:esbuild",
            "defaultConfiguration": "development",
            "dependsOn": [
              "build"
            ],
            "options": {
              "buildTarget": "recommendation-service:build",
              "runBuildTargetDependencies": false
            },
            "configurations": {
              "development": {
                "buildTarget": "recommendation-service:build:development"
              },
              "production": {
                "buildTarget": "recommendation-service:build:production"
              }
            },
            "parallelism": true
          }
        },
        "name": "recommendation-service",
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/post-mvp-services/recommendation-service/src",
        "projectType": "application",
        "tags": [],
        "implicitDependencies": []
      }
    },
    "coupon-service": {
      "name": "coupon-service",
      "type": "app",
      "data": {
        "root": "apps/backend/post-mvp-services/coupon-service",
        "targets": {
          "test": {
            "metadata": {
              "technologies": [
                "jest"
              ],
              "description": "Run Jest Tests",
              "help": {
                "command": "npx jest --help",
                "example": {
                  "options": {
                    "coverage": true
                  }
                }
              }
            },
            "cache": true,
            "inputs": [
              "default",
              "^production",
              "{workspaceRoot}/apps/jest.preset.js",
              {
                "externalDependencies": [
                  "jest"
                ]
              }
            ],
            "outputs": [
              "{workspaceRoot}/apps/coverage/apps/post-mvp-services/coupon-service"
            ],
            "executor": "nx:run-commands",
            "options": {
              "cwd": "apps/backend/post-mvp-services/coupon-service",
              "env": {
                "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\",\"module\":\"commonjs\",\"customConditions\":null}"
              },
              "command": "jest",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "serve": {
            "continuous": true,
            "executor": "@nx/esbuild:esbuild",
            "defaultConfiguration": "development",
            "dependsOn": [
              "build"
            ],
            "options": {
              "buildTarget": "coupon-service:build",
              "runBuildTargetDependencies": false
            },
            "configurations": {
              "development": {
                "buildTarget": "coupon-service:build:development"
              },
              "production": {
                "buildTarget": "coupon-service:build:production"
              }
            },
            "parallelism": true
          }
        },
        "name": "coupon-service",
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/post-mvp-services/coupon-service/src",
        "projectType": "application",
        "tags": [],
        "implicitDependencies": []
      }
    },
    "refund-service": {
      "name": "refund-service",
      "type": "app",
      "data": {
        "root": "apps/backend/post-mvp-services/refund-service",
        "targets": {
          "test": {
            "metadata": {
              "technologies": [
                "jest"
              ],
              "description": "Run Jest Tests",
              "help": {
                "command": "npx jest --help",
                "example": {
                  "options": {
                    "coverage": true
                  }
                }
              }
            },
            "cache": true,
            "inputs": [
              "default",
              "^production",
              "{workspaceRoot}/apps/jest.preset.js",
              {
                "externalDependencies": [
                  "jest"
                ]
              }
            ],
            "outputs": [
              "{workspaceRoot}/apps/coverage/apps/post-mvp-services/refund-service"
            ],
            "executor": "nx:run-commands",
            "options": {
              "cwd": "apps/backend/post-mvp-services/refund-service",
              "env": {
                "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\",\"module\":\"commonjs\",\"customConditions\":null}"
              },
              "command": "jest",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "serve": {
            "continuous": true,
            "executor": "@nx/esbuild:esbuild",
            "defaultConfiguration": "development",
            "dependsOn": [
              "build"
            ],
            "options": {
              "buildTarget": "refund-service:build",
              "runBuildTargetDependencies": false
            },
            "configurations": {
              "development": {
                "buildTarget": "refund-service:build:development"
              },
              "production": {
                "buildTarget": "refund-service:build:production"
              }
            },
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t refund-service -f apps/backend/refund-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "refund-service",
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/post-mvp-services/refund-service/src",
        "projectType": "application",
        "tags": [],
        "implicitDependencies": []
      }
    },
    "cms-service": {
      "name": "cms-service",
      "type": "app",
      "data": {
        "root": "apps/backend/post-mvp-services/cms-service",
        "targets": {
          "test": {
            "metadata": {
              "technologies": [
                "jest"
              ],
              "description": "Run Jest Tests",
              "help": {
                "command": "npx jest --help",
                "example": {
                  "options": {
                    "coverage": true
                  }
                }
              }
            },
            "cache": true,
            "inputs": [
              "default",
              "^production",
              "{workspaceRoot}/apps/jest.preset.js",
              {
                "externalDependencies": [
                  "jest"
                ]
              }
            ],
            "outputs": [
              "{workspaceRoot}/apps/coverage/apps/post-mvp-services/cms-service"
            ],
            "executor": "nx:run-commands",
            "options": {
              "cwd": "apps/backend/post-mvp-services/cms-service",
              "env": {
                "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\",\"module\":\"commonjs\",\"customConditions\":null}"
              },
              "command": "jest",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "serve": {
            "continuous": true,
            "executor": "@nx/esbuild:esbuild",
            "defaultConfiguration": "development",
            "dependsOn": [
              "build"
            ],
            "options": {
              "buildTarget": "cms-service:build",
              "runBuildTargetDependencies": false
            },
            "configurations": {
              "development": {
                "buildTarget": "cms-service:build:development"
              },
              "production": {
                "buildTarget": "cms-service:build:production"
              }
            },
            "parallelism": true
          }
        },
        "name": "cms-service",
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/post-mvp-services/cms-service/src",
        "projectType": "application",
        "tags": [],
        "implicitDependencies": []
      }
    },
    "analytics-service": {
      "name": "analytics-service",
      "type": "app",
      "data": {
        "root": "apps/backend/analytics-service",
        "targets": {
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/analytics-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/analytics-service",
              "main": "apps/backend/analytics-service/src/main.ts",
              "tsConfig": "apps/backend/analytics-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "analytics-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "analytics-service:build:development"
              },
              "production": {
                "buildTarget": "analytics-service:build:production"
              }
            },
            "parallelism": true
          },
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t analytics-service -f apps/backend/analytics-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "analytics-service",
        "sourceRoot": "apps/backend/analytics-service/src",
        "projectType": "application",
        "tags": [
          "type:service"
        ],
        "implicitDependencies": []
      }
    },
    "kong-service": {
      "name": "kong-service",
      "type": "app",
      "data": {
        "root": "apps/backend/kong-API-gateway",
        "name": "kong-service",
        "sourceRoot": "apps/backend/kong-API-gateway/src",
        "projectType": "application",
        "targets": {
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/kong-API-gateway",
              "main": "apps/backend/kong-API-gateway/src/main.ts",
              "tsConfig": "apps/backend/kong-API-gateway/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "kong-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "kong-service:build:development"
              },
              "production": {
                "buildTarget": "kong-service:build:production"
              }
            },
            "parallelism": true
          },
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/kong-API-gateway/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "docker-build": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t kong-gateway:latest apps/kong-gateway"
            },
            "docker-run": {
              "executor": "nx:run-commands",
              "options": {
                "command": "docker run -d -p 8000:8000 -p 8001:8001 --name kong-gateway kong-gateway:latest"
              }
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "implicitDependencies": [],
        "tags": []
      }
    },
    "invoice-service": {
      "name": "invoice-service",
      "type": "app",
      "data": {
        "root": "apps/backend/invoice-service",
        "targets": {
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/invoice-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/invoice-service",
              "main": "apps/backend/invoice-service/src/main.ts",
              "tsConfig": "apps/backend/invoice-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "invoice-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "invoice-service:build:development"
              },
              "production": {
                "buildTarget": "invoice-service:build:production"
              }
            },
            "parallelism": true
          },
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t invoice-service -f apps/backend/invoice-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "invoice-service",
        "sourceRoot": "apps/backend/invoice-service/src",
        "projectType": "application",
        "tags": [
          "type:service"
        ],
        "implicitDependencies": []
      }
    },
    "payment-service": {
      "name": "payment-service",
      "type": "app",
      "data": {
        "root": "apps/backend/payment-service",
        "targets": {
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/payment-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/payment-service",
              "main": "apps/backend/payment-service/src/main.ts",
              "tsConfig": "apps/backend/payment-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "payment-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "payment-service:build:development"
              },
              "production": {
                "buildTarget": "payment-service:build:production"
              }
            },
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t payment-service -f apps/backend/payment-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "payment-service",
        "projectType": "application",
        "tags": [
          "npm:public",
          "type:service"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "payment-service",
            "packageMain": "./src/main.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "apps/backend/payment-service/src",
        "implicitDependencies": []
      }
    },
    "product-service": {
      "name": "product-service",
      "type": "app",
      "data": {
        "root": "apps/backend/product-service",
        "targets": {
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/product-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/product-service",
              "main": "apps/backend/product-service/src/main.ts",
              "tsConfig": "apps/backend/product-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "product-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "product-service:build:development"
              },
              "production": {
                "buildTarget": "product-service:build:production"
              }
            },
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t product-service -f apps/backend/product-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "product-service",
        "projectType": "application",
        "tags": [
          "npm:public",
          "type:service"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "product-service",
            "packageMain": "./src/main.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "apps/backend/product-service/src",
        "implicitDependencies": []
      }
    },
    "rating-service": {
      "name": "rating-service",
      "type": "app",
      "data": {
        "root": "apps/backend/rating-service",
        "targets": {
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/rating-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/rating-service",
              "main": "apps/backend/rating-service/src/main.ts",
              "tsConfig": "apps/backend/rating-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "rating-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "rating-service:build:development"
              },
              "production": {
                "buildTarget": "rating-service:build:production"
              }
            },
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t rating-service -f apps/backend/rating-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "rating-service",
        "projectType": "application",
        "tags": [
          "npm:public",
          "type:service"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "rating-service",
            "packageMain": "./src/main.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "apps/backend/rating-service/src",
        "implicitDependencies": []
      }
    },
    "search-service": {
      "name": "search-service",
      "type": "app",
      "data": {
        "root": "apps/backend/search-service",
        "targets": {
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/backend/search-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/search-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/search-service",
              "main": "apps/backend/search-service/src/main.ts",
              "tsConfig": "apps/backend/search-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "search-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "search-service:build:development"
              },
              "production": {
                "buildTarget": "search-service:build:production"
              }
            },
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t search-service -f apps/backend/search-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "search-service",
        "projectType": "application",
        "tags": [
          "npm:public",
          "type:service"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "search-service",
            "packageMain": "./src/main.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "apps/backend/search-service/src",
        "implicitDependencies": []
      }
    },
    "vendor-service": {
      "name": "vendor-service",
      "type": "app",
      "data": {
        "root": "apps/backend/vendor-service",
        "targets": {
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/vendor-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/vendor-service",
              "main": "apps/backend/vendor-service/src/main.ts",
              "tsConfig": "apps/backend/vendor-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "vendor-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "vendor-service:build:development"
              },
              "production": {
                "buildTarget": "vendor-service:build:production"
              }
            },
            "parallelism": true
          },
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/backend/vendor-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t vendor-service -f apps/backend/vendor-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "vendor-service",
        "sourceRoot": "apps/backend/vendor-service/src",
        "projectType": "application",
        "tags": [
          "type:service"
        ],
        "implicitDependencies": []
      }
    },
    "admin-service": {
      "name": "admin-service",
      "type": "app",
      "data": {
        "root": "apps/backend/admin-service",
        "targets": {
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/admin-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/admin-service",
              "main": "apps/backend/admin-service/src/main.ts",
              "tsConfig": "apps/backend/admin-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "admin-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "admin-service:build:development"
              },
              "production": {
                "buildTarget": "admin-service:build:production"
              }
            },
            "parallelism": true
          },
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t admin-service -f apps/backend/admin-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "admin-service",
        "sourceRoot": "apps/backend/admin-service/src",
        "projectType": "application",
        "tags": [
          "type:service"
        ],
        "implicitDependencies": []
      }
    },
    "email-service": {
      "name": "email-service",
      "type": "app",
      "data": {
        "root": "apps/backend/email-service",
        "targets": {
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/email-service",
              "main": "apps/backend/email-service/src/main.ts",
              "tsConfig": "apps/backend/email-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "email-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "email-service:build:development"
              },
              "production": {
                "buildTarget": "email-service:build:production"
              }
            },
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/email-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t email-service -f apps/backend/email-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "email-service",
        "projectType": "application",
        "tags": [
          "npm:public",
          "type:service"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "email-service",
            "packageMain": "./src/main.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "apps/backend/email-service/src",
        "implicitDependencies": []
      }
    },
    "order-service": {
      "name": "order-service",
      "type": "app",
      "data": {
        "root": "apps/backend/order-service",
        "targets": {
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/order-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/order-service",
              "main": "apps/backend/order-service/src/main.ts",
              "tsConfig": "apps/backend/order-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "order-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "order-service:build:development"
              },
              "production": {
                "buildTarget": "order-service:build:production"
              }
            },
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t order-service -f apps/backend/order-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "order-service",
        "projectType": "application",
        "tags": [
          "npm:public",
          "type:service"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "order-service",
            "packageMain": "./src/main.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "apps/backend/order-service/src",
        "implicitDependencies": []
      }
    },
    "cart-service": {
      "name": "cart-service",
      "type": "app",
      "data": {
        "root": "apps/backend/cart-service",
        "targets": {
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/cart-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/cart-service",
              "main": "apps/backend/cart-service/src/main.ts",
              "tsConfig": "apps/backend/cart-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "cart-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "cart-service:build:development"
              },
              "production": {
                "buildTarget": "cart-service:build:production"
              }
            },
            "parallelism": true
          },
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/bacrating-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t cart-service -f apps/backend/cart-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "cart-service",
        "sourceRoot": "apps/backend/cart-service/src",
        "projectType": "application",
        "tags": [
          "type:service"
        ],
        "implicitDependencies": []
      }
    },
    "user-service": {
      "name": "user-service",
      "type": "app",
      "data": {
        "root": "apps/backend/user-service",
        "targets": {
          "lint": {
            "executor": "nx:eslint",
            "options": {
              "lintFilePatterns": [
                "apps/backend/user-service/src/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "nx:jest",
            "options": {
              "jestConfig": "apps/backend/user-service/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          },
          "nx-release-publish": {
            "executor": "@nx/js:release-publish",
            "dependsOn": [
              "^nx-release-publish"
            ],
            "options": {},
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/esbuild:esbuild",
            "outputs": [
              "{options.outputPath}"
            ],
            "defaultConfiguration": "production",
            "options": {
              "platform": "node",
              "outputPath": "dist/apps/backend/user-service",
              "main": "apps/backend/user-service/src/main.ts",
              "tsConfig": "apps/backend/user-service/tsconfig.app.json",
              "assets": [],
              "generatePackageJson": true,
              "bundle": true,
              "thirdParty": false
            },
            "configurations": {
              "development": {},
              "production": {}
            },
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/js:node",
            "defaultConfiguration": "development",
            "options": {
              "buildTarget": "user-service:build"
            },
            "configurations": {
              "development": {
                "buildTarget": "user-service:build:development"
              },
              "production": {
                "buildTarget": "user-service:build:production"
              }
            },
            "parallelism": true
          },
          "docker": {
            "executor": "nx:run-commands",
            "options": {
              "command": "docker build -t user-service -f apps/backend/user-service/Dockerfile ."
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "user-service",
        "projectType": "application",
        "tags": [
          "npm:public",
          "type:service"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "user-service",
            "packageMain": "./src/main.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "apps/backend/user-service/src",
        "implicitDependencies": []
      }
    },
    "seller-ui": {
      "name": "seller-ui",
      "type": "app",
      "data": {
        "root": "apps/frontend/seller-ui",
        "targets": {
          "build": {
            "executor": "@nx/next:build",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/frontend/seller-ui"
            },
            "configurations": {},
            "parallelism": true
          },
          "dev": {
            "continuous": true,
            "options": {
              "cwd": "apps/frontend/seller-ui",
              "command": "next dev"
            },
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "start": {
            "continuous": true,
            "options": {
              "cwd": "apps/frontend/seller-ui",
              "command": "next start"
            },
            "dependsOn": [
              "build"
            ],
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "serve-static": {
            "continuous": true,
            "options": {
              "cwd": "apps/frontend/seller-ui",
              "command": "next start"
            },
            "dependsOn": [
              "build"
            ],
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "build-deps": {
            "dependsOn": [
              "^build"
            ],
            "configurations": {},
            "options": {},
            "parallelism": true,
            "executor": "nx:noop"
          },
          "watch-deps": {
            "continuous": true,
            "dependsOn": [
              "build-deps"
            ],
            "executor": "nx:run-commands",
            "options": {
              "command": "npx nx watch --projects seller-ui --includeDependentProjects -- npx nx build-deps seller-ui"
            },
            "configurations": {},
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/next:server",
            "options": {
              "buildTarget": "seller-ui:build",
              "dev": true
            },
            "configurations": {},
            "parallelism": true,
            "continuous": true
          }
        },
        "name": "seller-ui",
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/frontend/seller-ui/src",
        "projectType": "application",
        "tags": [],
        "implicitDependencies": []
      }
    },
    "shared-middleware": {
      "name": "shared-middleware",
      "type": "lib",
      "data": {
        "root": "libs/shared/middlewares",
        "targets": {
          "test": {
            "options": {
              "cwd": "libs/shared/middlewares",
              "env": {
                "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\",\"module\":\"commonjs\",\"customConditions\":null}"
              },
              "command": "jest"
            },
            "metadata": {
              "technologies": [
                "jest"
              ],
              "description": "Run Jest Tests",
              "help": {
                "command": "npx jest --help",
                "example": {
                  "options": {
                    "coverage": true
                  }
                }
              }
            },
            "cache": true,
            "inputs": [
              "default",
              "^production",
              "{workspaceRoot}/libs/shared/jest.preset.js",
              {
                "externalDependencies": [
                  "jest"
                ]
              }
            ],
            "outputs": [
              "{workspaceRoot}/libs/shared/coverage/middlewares"
            ],
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "options": {
              "outputPath": "dist/libs/shared/middlewares",
              "main": "libs/shared/middlewares/src/index.ts",
              "tsConfig": "libs/shared/middlewares/tsconfig.lib.json"
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "shared-middleware",
        "projectType": "library",
        "tags": [
          "npm:private",
          "scope:shared",
          "type:lib"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "middlewares",
            "packageMain": "./src/index.js",
            "isInPackageManagerWorkspaces": false
          }
        },
        "sourceRoot": "libs/shared/middlewares/src",
        "implicitDependencies": []
      }
    },
    "shared-constants": {
      "name": "shared-constants",
      "type": "lib",
      "data": {
        "root": "libs/shared/constants",
        "name": "shared-constants",
        "sourceRoot": "libs/shared/constants/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "user-ui": {
      "name": "user-ui",
      "type": "app",
      "data": {
        "root": "apps/frontend/user-ui",
        "targets": {
          "build": {
            "executor": "@nx/next:build",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/apps/frontend/user-ui",
              "postcssConfig": "apps/frontend/user-ui/postcss.config.js"
            },
            "configurations": {},
            "parallelism": true
          },
          "dev": {
            "continuous": true,
            "options": {
              "cwd": "apps/frontend/user-ui",
              "command": "next dev"
            },
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "start": {
            "continuous": true,
            "options": {
              "cwd": "apps/frontend/user-ui",
              "command": "next start"
            },
            "dependsOn": [
              "build"
            ],
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "serve-static": {
            "continuous": true,
            "options": {
              "cwd": "apps/frontend/user-ui",
              "command": "next start"
            },
            "dependsOn": [
              "build"
            ],
            "executor": "nx:run-commands",
            "configurations": {},
            "parallelism": true
          },
          "build-deps": {
            "dependsOn": [
              "^build"
            ],
            "configurations": {},
            "options": {},
            "parallelism": true,
            "executor": "nx:noop"
          },
          "watch-deps": {
            "continuous": true,
            "dependsOn": [
              "build-deps"
            ],
            "executor": "nx:run-commands",
            "options": {
              "command": "npx nx watch --projects user-ui --includeDependentProjects -- npx nx build-deps user-ui"
            },
            "configurations": {},
            "parallelism": true
          },
          "serve": {
            "executor": "@nx/next:server",
            "options": {
              "buildTarget": "user-ui:build",
              "dev": true
            },
            "configurations": {},
            "parallelism": true,
            "continuous": true
          }
        },
        "name": "user-ui",
        "$schema": "../../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "apps/frontend/user-ui/src",
        "projectType": "application",
        "tags": [],
        "implicitDependencies": []
      }
    },
    "shared-swagger": {
      "name": "shared-swagger",
      "type": "lib",
      "data": {
        "root": "libs/shared/swagger",
        "name": "shared-swagger",
        "sourceRoot": "libs/shared/swagger/src",
        "projectType": "library",
        "tags": [
          "type:shared",
          "scope:swagger"
        ],
        "targets": {
          "build": {
            "executor": "@nx/js:tsc",
            "options": {
              "outputPath": "dist/libs/shared/swagger",
              "main": "libs/shared/swagger/src/index.ts",
              "tsConfig": "libs/shared/swagger/tsconfig.lib.json"
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-config": {
      "name": "shared-config",
      "type": "lib",
      "data": {
        "root": "libs/shared/config",
        "name": "shared-config",
        "sourceRoot": "libs/shared/config/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-logger": {
      "name": "shared-logger",
      "type": "lib",
      "data": {
        "root": "libs/shared/logger",
        "name": "shared-logger",
        "sourceRoot": "libs/shared/logger/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-email": {
      "name": "shared-email",
      "type": "lib",
      "data": {
        "root": "libs/shared/email",
        "name": "shared-email",
        "sourceRoot": "libs/shared/email/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "@nx/js:tsc",
            "options": {
              "outputPath": "dist/libs/shared/email",
              "main": "libs/shared/email/src/index.ts",
              "tsConfig": "libs/shared/email/tsconfig.lib.json"
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-error": {
      "name": "shared-error",
      "type": "lib",
      "data": {
        "root": "libs/shared/error",
        "name": "shared-error",
        "sourceRoot": "libs/shared/error/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-kafka": {
      "name": "shared-kafka",
      "type": "lib",
      "data": {
        "root": "libs/shared/kafka",
        "name": "shared-kafka",
        "sourceRoot": "libs/shared/kafka/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "implicitDependencies": [
          "shared-logger"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        }
      }
    },
    "shared-minio": {
      "name": "shared-minio",
      "type": "lib",
      "data": {
        "root": "libs/shared/minio",
        "name": "shared-minio",
        "sourceRoot": "libs/shared/minio/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-redis": {
      "name": "shared-redis",
      "type": "lib",
      "data": {
        "root": "libs/shared/redis",
        "name": "shared-redis",
        "sourceRoot": "libs/shared/redis/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:redis"
        ],
        "targets": {
          "build": {
            "executor": "@nx/js:tsc",
            "options": {
              "outputPath": "dist/libs/shared/redis",
              "main": "libs/shared/redis/src/index.ts",
              "tsConfig": "libs/shared/redis/tsconfig.lib.json"
            },
            "configurations": {},
            "parallelism": true
          },
          "lint": {
            "executor": "@nx/eslint:lint",
            "options": {
              "lintFilePatterns": [
                "libs/shared/redis/**/*.ts"
              ]
            },
            "configurations": {},
            "parallelism": true
          },
          "test": {
            "executor": "@nx/jest:jest",
            "outputs": [
              "{workspaceRoot}/coverage/libs/shared/redis"
            ],
            "options": {
              "jestConfig": "libs/shared/redis/jest.config.ts",
              "passWithNoTests": true
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-types": {
      "name": "shared-types",
      "type": "lib",
      "data": {
        "root": "libs/shared/types",
        "name": "shared-types",
        "sourceRoot": "libs/shared/types/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-utils": {
      "name": "shared-utils",
      "type": "lib",
      "data": {
        "root": "libs/shared/utils",
        "name": "shared-utils",
        "sourceRoot": "libs/shared/utils/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:lib"
        ],
        "targets": {
          "build": {
            "executor": "nx:noop",
            "configurations": {},
            "options": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared-auth": {
      "name": "shared-auth",
      "type": "lib",
      "data": {
        "root": "libs/shared/auth",
        "name": "shared-auth",
        "sourceRoot": "libs/shared/auth/src",
        "projectType": "library",
        "tags": [
          "scope:shared",
          "type:auth"
        ],
        "targets": {
          "build": {
            "executor": "@nx/js:tsc",
            "options": {
              "outputPath": "dist/libs/shared/auth",
              "main": "libs/shared/auth/src/index.ts",
              "tsConfig": "libs/shared/auth/tsconfig.lib.json"
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "implicitDependencies": []
      }
    },
    "shared": {
      "name": "shared",
      "type": "lib",
      "data": {
        "root": "libs/shared",
        "targets": {
          "test": {
            "executor": "@nx/jest:jest",
            "outputs": [
              "{workspaceRoot}/coverage/{projectRoot}"
            ],
            "options": {
              "jestConfig": "libs/shared/jest.config.ts"
            },
            "configurations": {},
            "parallelism": true
          },
          "build": {
            "executor": "@nx/js:tsc",
            "outputs": [
              "{options.outputPath}"
            ],
            "options": {
              "outputPath": "dist/libs/shared",
              "main": "libs/shared/src/index.ts",
              "tsConfig": "libs/shared/tsconfig.lib.json",
              "assets": [
                "libs/shared/*.md"
              ]
            },
            "configurations": {},
            "parallelism": true
          }
        },
        "name": "shared",
        "projectType": "library",
        "tags": [
          "npm:private"
        ],
        "metadata": {
          "targetGroups": {},
          "js": {
            "packageName": "@shared/middlewares",
            "packageMain": "./src/index.js",
            "isInPackageManagerWorkspaces": true
          }
        },
        "$schema": "../../node_modules/nx/schemas/project-schema.json",
        "sourceRoot": "libs/shared/src",
        "implicitDependencies": []
      }
    }
  },
  "externalNodes": {},
  "dependencies": {
    "recommendation-service": [
      {
        "source": "recommendation-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "recommendation-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "recommendation-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "recommendation-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "recommendation-service",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "coupon-service": [
      {
        "source": "coupon-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "coupon-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "coupon-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "coupon-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "coupon-service",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "refund-service": [
      {
        "source": "refund-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "refund-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "refund-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "refund-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "refund-service",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "cms-service": [
      {
        "source": "cms-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "cms-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "cms-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "cms-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "cms-service",
        "target": "shared-kafka",
        "type": "static"
      }
    ],
    "analytics-service": [
      {
        "source": "analytics-service",
        "target": "shared-config",
        "type": "static"
      },
      {
        "source": "analytics-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "analytics-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "analytics-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "analytics-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "analytics-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "analytics-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "analytics-service",
        "target": "shared-utils",
        "type": "static"
      }
    ],
    "kong-service": [],
    "invoice-service": [
      {
        "source": "invoice-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "invoice-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "invoice-service",
        "target": "shared-middleware",
        "type": "static"
      },
      {
        "source": "invoice-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "invoice-service",
        "target": "shared-utils",
        "type": "static"
      },
      {
        "source": "invoice-service",
        "target": "shared-minio",
        "type": "static"
      },
      {
        "source": "invoice-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "invoice-service",
        "target": "shared-kafka",
        "type": "static"
      }
    ],
    "payment-service": [
      {
        "source": "payment-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "payment-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "payment-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "payment-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "payment-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "payment-service",
        "target": "shared-redis",
        "type": "static"
      }
    ],
    "product-service": [
      {
        "source": "product-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "product-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "product-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "product-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "product-service",
        "target": "shared-minio",
        "type": "static"
      },
      {
        "source": "product-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "product-service",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "rating-service": [
      {
        "source": "rating-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "rating-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "rating-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "rating-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "rating-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "rating-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "rating-service",
        "target": "shared-constants",
        "type": "static"
      }
    ],
    "search-service": [
      {
        "source": "search-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "search-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "search-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "search-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "search-service",
        "target": "shared-redis",
        "type": "static"
      }
    ],
    "vendor-service": [
      {
        "source": "vendor-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-minio",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-types",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-constants",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-config",
        "type": "static"
      },
      {
        "source": "vendor-service",
        "target": "shared-redis",
        "type": "static"
      }
    ],
    "admin-service": [
      {
        "source": "admin-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "admin-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "admin-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "admin-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "admin-service",
        "target": "shared-utils",
        "type": "static"
      },
      {
        "source": "admin-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "admin-service",
        "target": "shared-kafka",
        "type": "static"
      }
    ],
    "email-service": [
      {
        "source": "email-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-middleware",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-email",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-minio",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-config",
        "type": "static"
      },
      {
        "source": "email-service",
        "target": "shared-constants",
        "type": "static"
      }
    ],
    "order-service": [
      {
        "source": "order-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "order-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "order-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "order-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "order-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "order-service",
        "target": "shared-redis",
        "type": "static"
      }
    ],
    "cart-service": [
      {
        "source": "cart-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-middleware",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-redis",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-config",
        "type": "static"
      },
      {
        "source": "cart-service",
        "target": "shared-constants",
        "type": "static"
      }
    ],
    "user-service": [
      {
        "source": "user-service",
        "target": "shared-swagger",
        "type": "static"
      },
      {
        "source": "user-service",
        "target": "shared-error",
        "type": "static"
      },
      {
        "source": "user-service",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "user-service",
        "target": "shared-kafka",
        "type": "static"
      },
      {
        "source": "user-service",
        "target": "shared-auth",
        "type": "static"
      },
      {
        "source": "user-service",
        "target": "shared-redis",
        "type": "static"
      }
    ],
    "seller-ui": [],
    "shared-middleware": [
      {
        "source": "shared-middleware",
        "target": "shared-auth",
        "type": "static"
      }
    ],
    "shared-constants": [],
    "user-ui": [],
    "shared-swagger": [],
    "shared-config": [],
    "shared-logger": [],
    "shared-email": [
      {
        "source": "shared-email",
        "target": "shared-config",
        "type": "static"
      },
      {
        "source": "shared-email",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "shared-error": [],
    "shared-kafka": [
      {
        "source": "shared-kafka",
        "target": "shared-logger",
        "type": "implicit"
      },
      {
        "source": "shared-kafka",
        "target": "shared-types",
        "type": "static"
      },
      {
        "source": "shared-kafka",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "shared-minio": [
      {
        "source": "shared-minio",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "shared-redis": [
      {
        "source": "shared-redis",
        "target": "shared-logger",
        "type": "static"
      }
    ],
    "shared-types": [],
    "shared-utils": [
      {
        "source": "shared-utils",
        "target": "shared-logger",
        "type": "static"
      },
      {
        "source": "shared-utils",
        "target": "shared-minio",
        "type": "static"
      }
    ],
    "shared-auth": [],
    "shared": []
  },
  "version": "6.0",
  "errors": [
    {
      "stack": " - package-lock.json: SyntaxError: Unexpected token < in JSON at position 689\n    at JSON.parse (<anonymous>)\n    at parsePackageLockFile (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/npm-parser.js:23:26)\n    at getNpmLockfileNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/npm-parser.js:29:18)\n    at getLockFileNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/lock-file.js:57:57)\n    at exports.createNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/index.js:54:64)\n    at /home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/utils.js:10:33\n    at Array.map (<anonymous>)\n    at createNodesFromFiles (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/utils.js:8:35)\n    at exports.createNodesV2 (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/index.js:23:51)\n    at LoadedNxPlugin.createNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/loaded-nx-plugin.js:22:65)\n    SyntaxError: Unexpected token < in JSON at position 689\n        at JSON.parse (<anonymous>)\n        at parsePackageLockFile (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/npm-parser.js:23:26)\n        at getNpmLockfileNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/npm-parser.js:29:18)\n        at getLockFileNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/lock-file.js:57:57)\n        at exports.createNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/index.js:54:64)\n        at /home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/utils.js:10:33\n        at Array.map (<anonymous>)\n        at createNodesFromFiles (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/utils.js:8:35)\n        at exports.createNodesV2 (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/index.js:23:51)\n        at LoadedNxPlugin.createNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/loaded-nx-plugin.js:22:65)",
      "message": "An error occurred while processing files for the nx/js/dependencies-and-lockfile plugin\n.\n  - package-lock.json: Unexpected token < in JSON at position 689",
      "errors": [
        [
          "package-lock.json",
          {
            "stack": "SyntaxError: Unexpected token < in JSON at position 689\n    at JSON.parse (<anonymous>)\n    at parsePackageLockFile (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/npm-parser.js:23:26)\n    at getNpmLockfileNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/npm-parser.js:29:18)\n    at getLockFileNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/lock-file/lock-file.js:57:57)\n    at exports.createNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/index.js:54:64)\n    at /home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/utils.js:10:33\n    at Array.map (<anonymous>)\n    at createNodesFromFiles (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/utils.js:8:35)\n    at exports.createNodesV2 (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/plugins/js/index.js:23:51)\n    at LoadedNxPlugin.createNodes (/home/swapna/Tentalents-ecommerce/node_modules/nx/src/project-graph/plugins/loaded-nx-plugin.js:22:65)",
            "message": "Unexpected token < in JSON at position 689"
          }
        ]
      ],
      "partialResults": [],
      "name": "AggregateCreateNodesError"
    }
  ],
  "computedAt": 1753756596452
}