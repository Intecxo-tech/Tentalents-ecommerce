generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) @map("_id") @db.Uuid
  name           String?
  email          String          @unique
  password       String?
  role           UserRole        @default(buyer)
  phone          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  profileImage   String?
  altPhone       String?
  address        String?
  admin          Admin?
  tokens         UserToken[]
  orders         Order[]
  ratings        Rating[]
  searchLogs     SearchLog[]
  vendor         Vendor?
  refundRequests RefundRequest[]
  mediaUploaded  Media[]
  addresses      Address[] // Relation to User's addresses
  cartItems      CartItem[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model PendingUserOtp {
  email     String   @id
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Vendor {
  id              String           @id @default(uuid()) @map("_id") @db.Uuid
  userId          String?          @unique @db.Uuid
  name            String
  email           String           @unique
  password        String? // ðŸ‘ˆ Add this line
  profileImage    String?
  businessName    String
  phone           String?
  tokens          UserToken[]
  addresses       Address[] // Relation to User's addresses
  status          VendorStatus     @default(pending)
  address         String?
  gstNumber       String?
  kycDocsUrl      String[]         @default([])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invoices        Invoice[]
  productListings ProductListing[]
  user            User?            @relation(fields: [userId], references: [id])
  ratings         Rating[]
  orderItems      OrderItem[]
  refundRequests  RefundRequest[]
  cartItems       CartItem[]
  bankDetail      BankDetail?

  @@index([email])
  @@index([status])
}

model Admin {
  id         String      @id @default(uuid()) @db.Uuid
  userId     String      @unique @db.Uuid
  name       String
  role       AdminRole   @default(ADMIN)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  bankDetail BankDetail?
  actions    ActionLog[]
  user       User        @relation(fields: [userId], references: [id])
}

model ActionLog {
  id         String               @id @default(uuid())
  adminId    String               @db.Uuid
  actionType ModerationActionType
  targetType TargetType
  targetId   String
  reason     String?
  notes      String?
  status     ModerationStatus     @default(PENDING)
  createdAt  DateTime             @default(now())
  resolvedAt DateTime?
  admin      Admin                @relation(fields: [adminId], references: [id])

  @@index([targetType])
  @@index([targetId])
  @@index([status])
}

model Address {
  id           String   @id @default(uuid()) @map("_id") @db.Uuid
  userId       String?  @db.Uuid
  vendorId     String?  @db.Uuid
  name         String
  phone        String
  country      String
  state        String
  city         String
  pinCode      String
  addressLine1 String
  addressLine2 String?
  addressType  String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  vendor Vendor? @relation(fields: [vendorId], references: [id])

  orders Order[] @relation("OrderShippingAddress")

  @@index([userId])
  @@index([vendorId])
  @@index([addressType])
}

model BankDetail {
  id            String   @id @default(uuid())
  accountHolder String
  accountNumber String
  ifscCode      String
  bankName      String
  branchName    String?
  upiId         String?
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  vendorId String? @unique @db.Uuid
  adminId  String? @unique @db.Uuid

  vendor Vendor? @relation(fields: [vendorId], references: [id])
  admin  Admin?  @relation(fields: [adminId], references: [id])

  @@index([vendorId])
  @@index([adminId])
}

model Product {
  id                      String           @id @default(uuid())
  title                   String
  description             String?
  category                String?
  imageUrls               String[]
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  subCategory             String?
  slug                    String?          @unique
  listings                ProductListing[]
  ratings                 Rating[]
  cartItems               CartItem[]
  // New fields
  order                   OrderItem[]
  brand                   String?
  includedComponents      String[]         @default([])
  numberOfItems           Int?
  enclosureMaterial       String?
  productCareInstructions String?
  productFeatures         String[]         @default([])

  @@index([title])
  @@index([category])
  @@index([subCategory])
}

model ProductListing {
  id                      String               @id @default(uuid())
  productId               String
  vendorId                String               @db.Uuid
  sku                     String?              @unique
  price                   Decimal
  stock                   Int                  @default(0)
  deliveryEta             String?
  status                  ProductListingStatus @default(ACTIVE)
  updatedAt               DateTime             @updatedAt
  createdAt               DateTime             @default(now())
  itemWeight              Decimal
  originalPrice           Decimal
  packageHeight           Float?
  packageLength           Float?
  packageWidth            Float?
  unit                    String
  vendor                  Vendor               @relation(fields: [vendorId], references: [id])
  product                 Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants                ProductVariant[]
  cartItems               CartItem[]
  brand                   String?
  includedComponents      String[]             @default([])
  numberOfItems           Int?
  enclosureMaterial       String?
  productCareInstructions String?
  productFeatures         String[]             @default([])
  dispatchTimeInDays      Int? // NEW: Estimated dispatch time in days
  shippingCost            Decimal              @default(0.0) // NEW: Vendor-defined shipping/handling cost

  @@index([productId])
  @@index([status])
}

model ProductVariant {
  id               String         @id @default(uuid())
  productListingId String
  name             String
  value            String
  productListing   ProductListing @relation(fields: [productListingId], references: [id], onDelete: Cascade)

  @@index([productListingId])
}

model Rating {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  productId String?
  vendorId  String?  @db.Uuid
  score     Int
  comment   String?
  imageUrl  String?
  videoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id])
  vendor    Vendor?  @relation(fields: [vendorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  // âœ… Add these:
  @@unique([userId, productId])
  @@unique([userId, vendorId])
  @@index([userId])
  @@index([productId])
  @@index([vendorId])
}

model SearchLog {
  id          String   @id @default(uuid())
  keyword     String
  userId      String   @db.Uuid
  sessionId   String?
  sourceIp    String?
  deviceType  String?
  resultCount Int?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([keyword])
  @@index([userId])
  @@index([createdAt])
}

model OrderItem {
  id             String         @id @default(uuid())
  orderId        String
  productId      String
  listingId      String
  vendorId       String         @db.Uuid
  quantity       Int
  unitPrice      Decimal
  totalPrice     Decimal
  status         ItemStatus     @default(pending)
  addedAt        DateTime       @default(now())
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vendor         Vendor         @relation(fields: [vendorId], references: [id])
  dispatchStatus DispatchStatus @default(not_started) // Enum is applied here
  dispatchTime   DateTime?
  shippingCost   Decimal        @default(0.0) // Optional time when the order was dispatched
  product        Product        @relation(fields: [productId], references: [id]) // Ensure this relation exists

  @@index([orderId])
  @@index([productId])
  @@index([vendorId])
  @@index([status])
}

model Order {
  id                    String         @id @default(uuid())
  buyerId               String         @db.Uuid
  totalAmount           Decimal
  status                OrderStatus    @default(pending) // Order status, including confirmed, shipped, etc.
  paymentMode           String
  paymentRef            String?
  placedAt              DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  shippingAddressId     String?        @db.Uuid
  shippingAddress       Address?       @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  invoice               Invoice?
  buyer                 User           @relation(fields: [buyerId], references: [id])
  items                 OrderItem[]
  paymentStatus         PaymentStatus
  stripePaymentIntentId String?
  dispatchStatus        DispatchStatus @default(not_started) // Enum is applied here
  dispatchTime          DateTime?

  @@index([buyerId])
  @@index([status])
}

model Invoice {
  id       String   @id @default(uuid())
  orderId  String   @unique
  vendorId String   @db.Uuid
  pdfUrl   String
  issuedAt DateTime @default(now())
  order    Order    @relation(fields: [orderId], references: [id])
  vendor   Vendor   @relation(fields: [vendorId], references: [id])
}

model Session {
  id        String           @id @default(uuid())
  userId    String           @unique @db.Uuid
  ipAddress String?
  userAgent String?
  startedAt DateTime         @default(now())
  endedAt   DateTime?
  source    TrafficSource    @default(DIRECT)
  events    AnalyticsEvent[]

  @@index([userId])
  @@index([startedAt])
}

/// Captures an analytics event (pageview, click, conversion)
model AnalyticsEvent {
  id        String             @id @default(uuid())
  sessionId String
  eventType AnalyticsEventType
  pageUrl   String
  referrer  String?
  productId String?
  createdAt DateTime           @default(now())
  session   Session            @relation(fields: [sessionId], references: [id])

  @@index([eventType])
  @@index([productId])
  @@index([createdAt])
}

/// Aggregated daily page views (optional table for faster dashboards)
model DailyPageView {
  id      String   @id @default(uuid())
  date    DateTime
  pageUrl String
  count   Int      @default(0)

  @@unique([date, pageUrl])
  @@index([date])
}

model Metric {
  id         String   @id @default(uuid())
  name       String   @unique
  value      Float
  recordedAt DateTime @default(now())
  metadata   Json?

  @@index([name])
  @@index([recordedAt])
}

model CartItem {
  id             String         @id @default(uuid())
  userId         String         @db.Uuid
  listingId      String
  productId      String
  vendorId       String         @db.Uuid
  quantity       Int            @default(1)
  createdAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id])
  vendor         Vendor         @relation(fields: [vendorId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  productListing ProductListing @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([listingId])
  @@index([vendorId])
  @@index([productId])
}

model UserToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String?   @db.Uuid
  vendorId  String?   @db.Uuid
  createdAt DateTime  @default(now())
  revoked   Boolean   @default(false)
  expiresAt DateTime?

  user   User?   @relation(fields: [userId], references: [id])
  vendor Vendor? @relation(fields: [vendorId], references: [id])

  @@index([userId])
  @@index([vendorId])
  @@index([revoked])
}

model EmailLog {
  id        String         @id @default(uuid())
  to        String
  subject   String
  body      String
  sentAt    DateTime       @default(now())
  eventType EmailEventType

  @@index([to])
  @@index([eventType])
  @@index([sentAt])
}

/// Stores metadata for each payment made for an order
model Payment {
  id            String        @id @default(uuid())
  userId        String        @db.Uuid
  orderId       String
  amount        Decimal
  status        PaymentStatus
  method        PaymentMethod
  transactionId String        @unique
  gateway       String?
  remarks       String?
  createdAt     DateTime      @default(now())

  @@index([userId])
  @@index([orderId])
  @@index([status])
  @@index([transactionId])
}

model Page {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  type        PageType
  content     String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Coupon {
  id            String             @id @default(uuid())
  code          String             @unique
  type          CouponType
  scope         CouponScope
  value         Decimal
  maxDiscount   Decimal?
  minOrderValue Decimal?
  usageLimit    Int?
  perUserLimit  Int?
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  redemptions   CouponRedemption[]
}

model CouponRedemption {
  id         String   @id @default(uuid())
  couponId   String
  userId     String   @unique @db.Uuid
  orderId    String
  redeemedAt DateTime @default(now())
  coupon     Coupon   @relation(fields: [couponId], references: [id])

  @@unique([couponId, userId, orderId])
  @@index([userId])
}

model Recommendation {
  id            String   @id @default(uuid())
  userId        String   @unique @db.Uuid
  productId     String
  score         Float
  recommendedAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model PopularProduct {
  id        String   @id @default(uuid())
  productId String   @unique
  score     Float
  updatedAt DateTime @updatedAt
}

model RefundRequest {
  id            String       @id @default(uuid())
  orderItemId   String
  userId        String       @db.Uuid
  vendorId      String       @db.Uuid
  reason        RefundReason
  status        RefundStatus @default(REQUESTED)
  comment       String?
  attachmentUrl String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  resolvedAt    DateTime?
  user          User         @relation(fields: [userId], references: [id])
  vendor        Vendor       @relation(fields: [vendorId], references: [id])

  @@index([userId])
  @@index([vendorId])
  @@index([orderItemId])
  @@index([status])
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum ModerationActionType {
  SUSPEND_VENDOR
  REMOVE_PRODUCT
  APPROVE_VENDOR
  REJECT_VENDOR
  WARN_VENDOR
  SYSTEM_NOTE
}

enum TargetType {
  VENDOR
  PRODUCT
  USER
  ORDER
}

enum ModerationStatus {
  PENDING
  RESOLVED
  ESCALATED
  DISMISSED
}

enum UserRole {
  buyer
  seller
  admin
  super_admin
}

enum VendorStatus {
  pending
  approved
  rejected
  suspended
}

enum ProductListingStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
}

enum RatingTargetType {
  PRODUCT
  SELLER
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  canceled
  returned
  refunded
}

enum ItemStatus {
  pending
  confirmed
  shipped
  delivered
  canceled
  returned
  refunded
}

enum TrafficSource {
  DIRECT
  ORGANIC
  SOCIAL
  EMAIL
  REFERRAL
  PAID_AD
}

enum DispatchStatus {
  not_started
  preparing
  dispatched
  in_transit
  delivered
  failed
}

enum AnalyticsEventType {
  PAGE_VIEW
  PRODUCT_VIEW
  ADD_TO_CART
  PURCHASE
  SIGNUP
}

enum EmailEventType {
  registration
  otp
  order_confirmation
  invoice
}

/// Status of the payment after gateway/logic processing
enum PaymentStatus {
  success
  failed
  pending
}

/// Mode selected by user at checkout
enum PaymentMethod {
  upi
  cod
  card
}

enum PageType {
  TERMS_AND_CONDITIONS
  PRIVACY_POLICY
  ABOUT_US
  FAQ
  CUSTOM
}

enum CouponType {
  FLAT
  PERCENTAGE
}

enum CouponScope {
  GLOBAL
  PRODUCT
  CATEGORY
  VENDOR
  USER
}

enum RefundReason {
  DAMAGED_ITEM
  WRONG_ITEM
  NOT_DELIVERED
  BUYER_CHANGED_MIND
  OTHER
}

enum RefundStatus {
  REQUESTED
  APPROVED
  REJECTED
  REFUNDED
  CANCELLED
}

model Media {
  id         String   @id @default(uuid())
  url        String
  type       String // image, video, pdf, kyc_doc, etc.
  uploadedBy String?  @db.Uuid
  modelType  String // e.g. "product", "vendor", "rating", "invoice"
  modelId    String // id of the related record (foreign ID)
  createdAt  DateTime @default(now())

  uploader User? @relation(fields: [uploadedBy], references: [id])

  @@index([modelType, modelId])
}
