
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  profileImage: 'profileImage',
  altPhone: 'altPhone',
  address: 'address'
};

exports.Prisma.PendingUserOtpScalarFieldEnum = {
  email: 'email',
  otp: 'otp',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  email: 'email',
  profileImage: 'profileImage',
  businessName: 'businessName',
  phone: 'phone',
  status: 'status',
  address: 'address',
  gstNumber: 'gstNumber',
  kycDocsUrl: 'kycDocsUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActionLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  actionType: 'actionType',
  targetType: 'targetType',
  targetId: 'targetId',
  reason: 'reason',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  vendorId: 'vendorId',
  name: 'name',
  phone: 'phone',
  country: 'country',
  state: 'state',
  city: 'city',
  pinCode: 'pinCode',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  addressType: 'addressType',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  imageUrls: 'imageUrls',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subCategory: 'subCategory',
  slug: 'slug',
  brand: 'brand',
  includedComponents: 'includedComponents',
  numberOfItems: 'numberOfItems',
  enclosureMaterial: 'enclosureMaterial',
  productCareInstructions: 'productCareInstructions',
  productFeatures: 'productFeatures'
};

exports.Prisma.ProductListingScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  vendorId: 'vendorId',
  sku: 'sku',
  price: 'price',
  stock: 'stock',
  deliveryEta: 'deliveryEta',
  status: 'status',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  itemWeight: 'itemWeight',
  originalPrice: 'originalPrice',
  packageHeight: 'packageHeight',
  packageLength: 'packageLength',
  packageWidth: 'packageWidth',
  unit: 'unit',
  brand: 'brand',
  includedComponents: 'includedComponents',
  numberOfItems: 'numberOfItems',
  enclosureMaterial: 'enclosureMaterial',
  productCareInstructions: 'productCareInstructions',
  productFeatures: 'productFeatures'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productListingId: 'productListingId',
  name: 'name',
  value: 'value'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  vendorId: 'vendorId',
  score: 'score',
  comment: 'comment',
  imageUrl: 'imageUrl',
  videoUrl: 'videoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SearchLogScalarFieldEnum = {
  id: 'id',
  keyword: 'keyword',
  userId: 'userId',
  sessionId: 'sessionId',
  sourceIp: 'sourceIp',
  deviceType: 'deviceType',
  resultCount: 'resultCount',
  createdAt: 'createdAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  listingId: 'listingId',
  vendorId: 'vendorId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  status: 'status',
  addedAt: 'addedAt',
  dispatchStatus: 'dispatchStatus',
  dispatchTime: 'dispatchTime'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  totalAmount: 'totalAmount',
  status: 'status',
  paymentMode: 'paymentMode',
  paymentRef: 'paymentRef',
  placedAt: 'placedAt',
  updatedAt: 'updatedAt',
  shippingAddressId: 'shippingAddressId',
  paymentStatus: 'paymentStatus',
  stripePaymentIntentId: 'stripePaymentIntentId',
  dispatchStatus: 'dispatchStatus',
  dispatchTime: 'dispatchTime'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  vendorId: 'vendorId',
  pdfUrl: 'pdfUrl',
  issuedAt: 'issuedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  source: 'source'
};

exports.Prisma.AnalyticsEventScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  eventType: 'eventType',
  pageUrl: 'pageUrl',
  referrer: 'referrer',
  productId: 'productId',
  createdAt: 'createdAt'
};

exports.Prisma.DailyPageViewScalarFieldEnum = {
  id: 'id',
  date: 'date',
  pageUrl: 'pageUrl',
  count: 'count'
};

exports.Prisma.MetricScalarFieldEnum = {
  id: 'id',
  name: 'name',
  value: 'value',
  recordedAt: 'recordedAt',
  metadata: 'metadata'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  listingId: 'listingId',
  productId: 'productId',
  vendorId: 'vendorId',
  quantity: 'quantity',
  createdAt: 'createdAt'
};

exports.Prisma.UserTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  vendorId: 'vendorId',
  createdAt: 'createdAt',
  revoked: 'revoked',
  expiresAt: 'expiresAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  to: 'to',
  subject: 'subject',
  body: 'body',
  sentAt: 'sentAt',
  eventType: 'eventType'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orderId: 'orderId',
  amount: 'amount',
  status: 'status',
  method: 'method',
  transactionId: 'transactionId',
  gateway: 'gateway',
  remarks: 'remarks',
  createdAt: 'createdAt'
};

exports.Prisma.PageScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  type: 'type',
  content: 'content',
  isPublished: 'isPublished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  type: 'type',
  scope: 'scope',
  value: 'value',
  maxDiscount: 'maxDiscount',
  minOrderValue: 'minOrderValue',
  usageLimit: 'usageLimit',
  perUserLimit: 'perUserLimit',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CouponRedemptionScalarFieldEnum = {
  id: 'id',
  couponId: 'couponId',
  userId: 'userId',
  orderId: 'orderId',
  redeemedAt: 'redeemedAt'
};

exports.Prisma.RecommendationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  score: 'score',
  recommendedAt: 'recommendedAt'
};

exports.Prisma.PopularProductScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  score: 'score',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefundRequestScalarFieldEnum = {
  id: 'id',
  orderItemId: 'orderItemId',
  userId: 'userId',
  vendorId: 'vendorId',
  reason: 'reason',
  status: 'status',
  comment: 'comment',
  attachmentUrl: 'attachmentUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  buyer: 'buyer',
  seller: 'seller',
  admin: 'admin',
  super_admin: 'super_admin'
};

exports.VendorStatus = exports.$Enums.VendorStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  suspended: 'suspended'
};

exports.AdminRole = exports.$Enums.AdminRole = {
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.ModerationActionType = exports.$Enums.ModerationActionType = {
  SUSPEND_VENDOR: 'SUSPEND_VENDOR',
  REMOVE_PRODUCT: 'REMOVE_PRODUCT',
  APPROVE_VENDOR: 'APPROVE_VENDOR',
  REJECT_VENDOR: 'REJECT_VENDOR',
  WARN_VENDOR: 'WARN_VENDOR',
  SYSTEM_NOTE: 'SYSTEM_NOTE'
};

exports.TargetType = exports.$Enums.TargetType = {
  VENDOR: 'VENDOR',
  PRODUCT: 'PRODUCT',
  USER: 'USER',
  ORDER: 'ORDER'
};

exports.ModerationStatus = exports.$Enums.ModerationStatus = {
  PENDING: 'PENDING',
  RESOLVED: 'RESOLVED',
  ESCALATED: 'ESCALATED',
  DISMISSED: 'DISMISSED'
};

exports.ProductListingStatus = exports.$Enums.ProductListingStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  OUT_OF_STOCK: 'OUT_OF_STOCK',
  DISCONTINUED: 'DISCONTINUED'
};

exports.ItemStatus = exports.$Enums.ItemStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  shipped: 'shipped',
  delivered: 'delivered',
  canceled: 'canceled',
  returned: 'returned',
  refunded: 'refunded'
};

exports.DispatchStatus = exports.$Enums.DispatchStatus = {
  not_started: 'not_started',
  preparing: 'preparing',
  dispatched: 'dispatched',
  in_transit: 'in_transit',
  delivered: 'delivered',
  failed: 'failed'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  shipped: 'shipped',
  delivered: 'delivered',
  canceled: 'canceled',
  returned: 'returned',
  refunded: 'refunded'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  success: 'success',
  failed: 'failed',
  pending: 'pending'
};

exports.TrafficSource = exports.$Enums.TrafficSource = {
  DIRECT: 'DIRECT',
  ORGANIC: 'ORGANIC',
  SOCIAL: 'SOCIAL',
  EMAIL: 'EMAIL',
  REFERRAL: 'REFERRAL',
  PAID_AD: 'PAID_AD'
};

exports.AnalyticsEventType = exports.$Enums.AnalyticsEventType = {
  PAGE_VIEW: 'PAGE_VIEW',
  PRODUCT_VIEW: 'PRODUCT_VIEW',
  ADD_TO_CART: 'ADD_TO_CART',
  PURCHASE: 'PURCHASE',
  SIGNUP: 'SIGNUP'
};

exports.EmailEventType = exports.$Enums.EmailEventType = {
  registration: 'registration',
  otp: 'otp',
  order_confirmation: 'order_confirmation',
  invoice: 'invoice'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  upi: 'upi',
  cod: 'cod',
  card: 'card'
};

exports.PageType = exports.$Enums.PageType = {
  TERMS_AND_CONDITIONS: 'TERMS_AND_CONDITIONS',
  PRIVACY_POLICY: 'PRIVACY_POLICY',
  ABOUT_US: 'ABOUT_US',
  FAQ: 'FAQ',
  CUSTOM: 'CUSTOM'
};

exports.CouponType = exports.$Enums.CouponType = {
  FLAT: 'FLAT',
  PERCENTAGE: 'PERCENTAGE'
};

exports.CouponScope = exports.$Enums.CouponScope = {
  GLOBAL: 'GLOBAL',
  PRODUCT: 'PRODUCT',
  CATEGORY: 'CATEGORY',
  VENDOR: 'VENDOR',
  USER: 'USER'
};

exports.RefundReason = exports.$Enums.RefundReason = {
  DAMAGED_ITEM: 'DAMAGED_ITEM',
  WRONG_ITEM: 'WRONG_ITEM',
  NOT_DELIVERED: 'NOT_DELIVERED',
  BUYER_CHANGED_MIND: 'BUYER_CHANGED_MIND',
  OTHER: 'OTHER'
};

exports.RefundStatus = exports.$Enums.RefundStatus = {
  REQUESTED: 'REQUESTED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  PendingUserOtp: 'PendingUserOtp',
  Vendor: 'Vendor',
  Admin: 'Admin',
  ActionLog: 'ActionLog',
  Address: 'Address',
  Product: 'Product',
  ProductListing: 'ProductListing',
  ProductVariant: 'ProductVariant',
  Rating: 'Rating',
  SearchLog: 'SearchLog',
  OrderItem: 'OrderItem',
  Order: 'Order',
  Invoice: 'Invoice',
  Session: 'Session',
  AnalyticsEvent: 'AnalyticsEvent',
  DailyPageView: 'DailyPageView',
  Metric: 'Metric',
  CartItem: 'CartItem',
  UserToken: 'UserToken',
  EmailLog: 'EmailLog',
  Payment: 'Payment',
  Page: 'Page',
  Coupon: 'Coupon',
  CouponRedemption: 'CouponRedemption',
  Recommendation: 'Recommendation',
  PopularProduct: 'PopularProduct',
  RefundRequest: 'RefundRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
